diff -u -r rodinia_3.1/opencl/lud/ocl/lud.cpp rodinia_3.1-patched/opencl/lud/ocl/lud.cpp
--- rodinia_3.1/opencl/lud/ocl/lud.cpp	2015-12-11 16:46:34.000000000 +0100
+++ rodinia_3.1-patched/opencl/lud/ocl/lud.cpp	2020-01-15 13:42:26.062438643 +0100
@@ -238,11 +238,16 @@
 	d_m = clCreateBuffer(context, CL_MEM_READ_WRITE, matrix_dim*matrix_dim * sizeof(float), NULL, &err );
 	if(err != CL_SUCCESS) { printf("ERROR: clCreateBuffer d_m (size:%d) => %d\n", matrix_dim*matrix_dim, err); return -1;} 
 
-	/* beginning of timing point */
-	stopwatch_start(&sw);
+	int run;
+	int runs = 11;
+	for (run = 0; run < runs; run++) {
+
 	err = clEnqueueWriteBuffer(cmd_queue, d_m, 1, 0, matrix_dim*matrix_dim*sizeof(float), m, 0, 0, 0);
 	if(err != CL_SUCCESS) { printf("ERROR: clEnqueueWriteBuffer d_m (size:%d) => %d\n", matrix_dim*matrix_dim, err); return -1; }
 	
+	/* beginning of timing point */
+	stopwatch_start(&sw);
+
 	int i=0;
 	for (i=0; i < matrix_dim-BLOCK_SIZE; i += BLOCK_SIZE) {
 	 
@@ -292,12 +297,14 @@
 	err = clEnqueueNDRangeKernel(cmd_queue, diagnal, 2, NULL, global_work1, local_work1, 0, 0, 0);
 	if(err != CL_SUCCESS) { printf("ERROR:  diagnal clEnqueueNDRangeKernel()=>%d failed\n", err); return -1; }	
 	
+	/* end of timing point */
+	stopwatch_stop(&sw);
+
 	err = clEnqueueReadBuffer(cmd_queue, d_m, 1, 0, matrix_dim*matrix_dim*sizeof(float), m, 0, 0, 0);
 	if(err != CL_SUCCESS) { printf("ERROR: clEnqueueReadBuffer  d_m (size:%d) => %d\n", matrix_dim*matrix_dim, err); return -1; }
 	clFinish(cmd_queue);
-	/* end of timing point */
-	stopwatch_stop(&sw);
-	printf("Time consumed(ms): %lf\n", 1000*get_interval_by_sec(&sw));
+	printf("Time consumed(microseconds): %lf\n", 1000000*get_interval_by_sec(&sw));
+	}
 
 	clReleaseMemObject(d_m);
 
Only in rodinia_3.1-patched/opencl/lud/ocl: lud.cpp~
Only in rodinia_3.1-patched/opencl/lud/ocl: lud.cpp.orig
